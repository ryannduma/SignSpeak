{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# SignSpeak: System Evaluation\n",
        "\n",
        "This notebook evaluates the performance of the SignSpeak system across different components and scenarios."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Import libraries\n",
        "import os\n",
        "import sys\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import cv2\n",
        "import torch\n",
        "from sklearn.metrics import classification_report, confusion_matrix, accuracy_score\n",
        "from tqdm.notebook import tqdm\n",
        "\n",
        "# Add src directory to path\n",
        "sys.path.append(os.path.abspath('../src'))\n",
        "\n",
        "# Import SignSpeak components\n",
        "from sign_recognition.detector import SignDetector\n",
        "from translation.translator import Translator\n",
        "from sign_generation.generator import SignGenerator\n",
        "\n",
        "# Set plot style\n",
        "sns.set_style(\"whitegrid\")\n",
        "plt.rcParams['figure.figsize'] = (12, 8)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 1. Sign Recognition Evaluation\n",
        "\n",
        "First, let's evaluate the sign recognition component."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Initialize sign detector\n",
        "detector = SignDetector()\n",
        "\n",
        "# Function to evaluate sign recognition on sample videos\n",
        "def evaluate_sign_recognition(video_dir, ground_truth_file=None):\n",
        "    \"\"\"\n",
        "    Evaluate sign recognition on a directory of videos.\n",
        "    \n",
        "    Args:\n",
        "        video_dir: Directory containing sign language videos\n",
        "        ground_truth_file: CSV file with video names and true labels\n",
        "    \n",
        "    Returns:\n",
        "        Dictionary with evaluation metrics\n",
        "    \"\"\"\n",
        "    # For demonstration, we'll use mock data\n",
        "    print(f\"Would evaluate videos in: {video_dir}\")\n",
        "    \n",
        "    # Mock ground truth and predictions\n",
        "    mock_signs = ['HELLO', 'THANK YOU', 'YES', 'NO', 'HELP']\n",
        "    mock_ground_truth = np.random.choice(mock_signs, size=100)\n",
        "    \n",
        "    # Simulate model accuracy (~75%)\n",
        "    correct_indices = np.random.choice([True, False], size=100, p=[0.75, 0.25])\n",
        "    mock_predictions = mock_ground_truth.copy()\n",
        "    \n",
        "    # Introduce errors\n",
        "    for i, is_correct in enumerate(correct_indices):\n",
        "        if not is_correct:\n",
        "            # Replace with a random different sign\n",
        "            other_signs = [s for s in mock_signs if s != mock_ground_truth[i]]\n",
        "            mock_predictions[i] = np.random.choice(other_signs)\n",
        "    \n",
        "    # Calculate metrics\n",
        "    accuracy = accuracy_score(mock_ground_truth, mock_predictions)\n",
        "    report = classification_report(mock_ground_truth, mock_predictions, output_dict=True)\n",
        "    conf_matrix = confusion_matrix(\n",
        "        mock_ground_truth, mock_predictions, labels=mock_signs\n",
        "    )\n",
        "    \n",
        "    return {\n",
        "        'accuracy': accuracy,\n",
        "        'report': report,\n",
        "        'confusion_matrix': conf_matrix,\n",
        "        'labels': mock_signs,\n",
        "        'ground_truth': mock_ground_truth,\n",
        "        'predictions': mock_predictions\n",
        "    }\n",
        "\n",
        "# Evaluate recognition (with mock data)\n",
        "recognition_eval = evaluate_sign_recognition('path/to/test/videos')\n",
        "print(f\"Sign Recognition Accuracy: {recognition_eval['accuracy']:.2f}\")\n",
        "\n",
        "# Display classification report\n",
        "report_df = pd.DataFrame(recognition_eval['report']).transpose()\n",
        "report_df = report_df.drop('accuracy', errors='ignore')\n",
        "report_df = report_df.drop('macro avg', errors='ignore')\n",
        "report_df = report_df.drop('weighted avg', errors='ignore')\n",
        "\n",
        "print(\"\\nClassification Report:\")\n",
        "display(report_df[['precision', 'recall', 'f1-score', 'support']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Visualize confusion matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "conf_mat = recognition_eval['confusion_matrix']\n",
        "labels = recognition_eval['labels']\n",
        "\n",
        "# Normalize confusion matrix\n",
        "conf_mat_norm = conf_mat.astype('float') / conf_mat.sum(axis=1)[:, np.newaxis]\n",
        "\n",
        "sns.heatmap(\n",
        "    conf_mat_norm, \n",
        "    annot=True, \n",
        "    fmt='.2f', \n",
        "    cmap='Blues',\n",
        "    xticklabels=labels,\n",
        "    yticklabels=labels\n",
        ")\n",
        "plt.xlabel('Predicted Sign')\n",
        "plt.ylabel('True Sign')\n",
        "plt.title('Confusion Matrix - Sign Recognition')\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 2. Translation Evaluation\n",
        "\n",
        "Next, let's evaluate the translation component."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Initialize translator\n",
        "translator = Translator(model_type=\"dummy\")\n",
        "\n",
        "# Function to evaluate translation quality\n",
        "def evaluate_translation(test_signs, reference_translations=None):\n",
        "    \"\"\"\n",
        "    Evaluate translation quality using BLEU score or similar metrics.\n",
        "    \n",
        "    Args:\n",
        "        test_signs: List of signs to translate\n",
        "        reference_translations: Ground truth translations (if available)\n",
        "    \n",
        "    Returns:\n",
        "        Dictionary with translation metrics\n",
        "    \"\"\"\n",
        "    translations = []\n",
        "    for sign in test_signs:\n",
        "        translated_text = translator.sign_to_text(sign)\n",
        "        translations.append(translated_text)\n",
        "    \n",
        "    # For demonstration, we'll just return the translations\n",
        "    # In a real scenario, we would compute BLEU scores, etc.\n",
        "    return {\n",
        "        'signs': test_signs,\n",
        "        'translations': translations\n",
        "    }\n",
        "\n",
        "# Define sample signs for evaluation\n",
        "sample_signs = ['HELLO', 'THANK YOU', 'YES', 'NO', 'HELP', 'WHAT', 'WHERE']\n",
        "\n",
        "# Evaluate translation\n",
        "translation_eval = evaluate_translation(sample_signs)\n",
        "\n",
        "# Display results\n",
        "print(\"Translation Examples:\")\n",
        "for sign, translation in zip(translation_eval['signs'], translation_eval['translations']):\n",
        "    print(f\"Sign: {sign:10} â†’ Translation: {translation}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 3. End-to-End System Evaluation\n",
        "\n",
        "Finally, let's evaluate the entire system from video input to text output."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Function to simulate end-to-end evaluation\n",
        "def evaluate_end_to_end(video_path, expected_output=None):\n",
        "    \"\"\"\n",
        "    Evaluate the end-to-end SignSpeak system.\n",
        "    \n",
        "    Args:\n",
        "        video_path: Path to a sign language video\n",
        "        expected_output: Expected translation (if available)\n",
        "        \n",
        "    Returns:\n",
        "        Dictionary with evaluation results\n",
        "    \"\"\"\n",
        "    print(f\"Would process video: {video_path}\")\n",
        "    \n",
        "    # Since we don't have actual video files, we'll simulate the process\n",
        "    # In a real scenario, we would:\n",
        "    # 1. Process the video to extract keypoints\n",
        "    # 2. Recognize signs from the keypoints\n",
        "    # 3. Translate the signs to text\n",
        "    # 4. Compare with the expected output\n",
        "    \n",
        "    # Mock results for demonstration\n",
        "    mock_processing_time = np.random.uniform(0.8, 1.5)  # seconds\n",
        "    mock_recognized_sign = np.random.choice(['HELLO', 'THANK YOU', 'YES', 'NO'])\n",
        "    mock_translation = translator.sign_to_text(mock_recognized_sign)\n",
        "    \n",
        "    # Simulate latency\n",
        "    detection_latency = np.random.uniform(0.2, 0.4)  # seconds\n",
        "    translation_latency = np.random.uniform(0.1, 0.3)  # seconds\n",
        "    total_latency = detection_latency + translation_latency\n",
        "    \n",
        "    return {\n",
        "        'processing_time': mock_processing_time,\n",
        "        'recognized_sign': mock_recognized_sign,\n",
        "        'translation': mock_translation,\n",
        "        'detection_latency': detection_latency,\n",
        "        'translation_latency': translation_latency,\n",
        "        'total_latency': total_latency\n",
        "    }\n",
        "\n",
        "# Evaluate multiple examples\n",
        "num_examples = 20\n",
        "e2e_results = [evaluate_end_to_end(f\"video_{i}.mp4\") for i in range(num_examples)]\n",
        "\n",
        "# Extract metrics\n",
        "processing_times = [result['processing_time'] for result in e2e_results]\n",
        "detection_latencies = [result['detection_latency'] for result in e2e_results]\n",
        "translation_latencies = [result['translation_latency'] for result in e2e_results]\n",
        "total_latencies = [result['total_latency'] for result in e2e_results]\n",
        "\n",
        "# Print average metrics\n",
        "print(f\"Average Processing Time: {np.mean(processing_times):.2f} seconds\")\n",
        "print(f\"Average Detection Latency: {np.mean(detection_latencies):.2f} seconds\")\n",
        "print(f\"Average Translation Latency: {np.mean(translation_latencies):.2f} seconds\")\n",
        "print(f\"Average Total Latency: {np.mean(total_latencies):.2f} seconds\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Visualize latency distribution\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "plt.subplot(1, 2, 1)\n",
        "sns.histplot(total_latencies, bins=10, kde=True, color='blue')\n",
        "plt.axvline(np.mean(total_latencies), color='red', linestyle='--', label='Mean')\n",
        "plt.title('Total Latency Distribution')\n",
        "plt.xlabel('Latency (seconds)')\n",
        "plt.ylabel('Frequency')\n",
        "plt.legend()\n",
        "\n",
        "plt.subplot(1, 2, 2)\n",
        "data = [\n",
        "    detection_latencies,\n",
        "    translation_latencies\n",
        "]\n",
        "labels = ['Detection', 'Translation']\n",
        "plt.boxplot(data, labels=labels)\n",
        "plt.title('Latency by Component')\n",
        "plt.ylabel('Latency (seconds)')\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 4. System Performance on Different Hardware\n",
        "\n",
        "Let's evaluate how the system performs across different hardware configurations."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Simulate performance on different hardware\n",
        "hardware_configs = [\n",
        "    {'name': 'High-end GPU', 'detection_speed': 0.05, 'translation_speed': 0.02},\n",
        "    {'name': 'Mid-range GPU', 'detection_speed': 0.10, 'translation_speed': 0.05},\n",
        "    {'name': 'CPU only', 'detection_speed': 0.30, 'translation_speed': 0.15},\n",
        "    {'name': 'Mobile device', 'detection_speed': 0.50, 'translation_speed': 0.25}\n",
        "]\n",
        "\n",
        "# Function to estimate performance\n",
        "def estimate_performance(hardware, num_frames=30):\n",
        "    \"\"\"\n",
        "    Estimate system performance on given hardware.\n",
        "    \n",
        "    Args:\n",
        "        hardware: Hardware configuration\n",
        "        num_frames: Number of frames to process\n",
        "        \n",
        "    Returns:\n",
        "        Performance metrics\n",
        "    \"\"\"\n",
        "    # Simulate variability\n",
        "    detection_times = np.random.normal(\n",
        "        hardware['detection_speed'], \n",
        "        hardware['detection_speed'] * 0.2, \n",
        "        num_frames\n",
        "    )\n",
        "    translation_times = np.random.normal(\n",
        "        hardware['translation_speed'], \n",
        "        hardware['translation_speed'] * 0.1, \n",
        "        num_frames\n",
        "    )\n",
        "    \n",
        "    # Ensure no negative times\n",
        "    detection_times = np.maximum(detection_times, 0.001)\n",
        "    translation_times = np.maximum(translation_times, 0.001)\n",
        "    \n",
        "    # Calculate metrics\n",
        "    fps = 1.0 / (np.mean(detection_times) + np.mean(translation_times))\n",
        "    total_time = np.sum(detection_times) + np.sum(translation_times)\n",
        "    \n",
        "    return {\n",
        "        'hardware': hardware['name'],\n",
        "        'fps': fps,\n",
        "        'total_time': total_time,\n",
        "        'avg_detection_time': np.mean(detection_times),\n",
        "        'avg_translation_time': np.mean(translation_times)\n",
        "    }\n",
        "\n",
        "# Evaluate performance on different hardware\n",
        "hw_results = [estimate_performance(hw) for hw in hardware_configs]\n",
        "\n",
        "# Create DataFrame for visualization\n",
        "hw_df = pd.DataFrame(hw_results)\n",
        "print(hw_df[['hardware', 'fps', 'avg_detection_time', 'avg_translation_time']])\n",
        "\n",
        "# Plot FPS by hardware\n",
        "plt.figure(figsize=(10, 6))\n",
        "sns.barplot(x='hardware', y='fps', data=hw_df, palette='viridis')\n",
        "plt.title('Estimated FPS by Hardware Configuration')\n",
        "plt.ylabel('Frames Per Second')\n",
        "plt.xlabel('Hardware')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## 5. User Experience Evaluation\n",
        "\n",
        "Finally, let's evaluate the user experience based on simulated user feedback."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Simulate user feedback data\n",
        "def generate_user_feedback(n_users=50):\n",
        "    \"\"\"\n",
        "    Generate simulated user feedback data.\n",
        "    \n",
        "    Args:\n",
        "        n_users: Number of users\n",
        "        \n",
        "    Returns:\n",
        "        DataFrame with user feedback\n",
        "    \"\"\"\n",
        "    data = {\n",
        "        'user_id': list(range(1, n_users + 1)),\n",
        "        'user_type': np.random.choice(['DHH user', 'Interpreter', 'Student', 'Other'], n_users),\n",
        "        'recognition_rating': np.random.normal(3.8, 0.8, n_users),\n",
        "        'translation_rating': np.random.normal(4.0, 0.7, n_users),\n",
        "        'interface_rating': np.random.normal(3.9, 0.9, n_users),\n",
        "        'latency_rating': np.random.normal(3.5, 1.0, n_users),\n",
        "        'overall_rating': np.random.normal(3.8, 0.8, n_users)\n",
        "    }\n",
        "    \n",
        "    # Clip ratings to 1-5 range\n",
        "    for key in data.keys():\n",
        "        if key.endswith('_rating'):\n",
        "            data[key] = np.clip(data[key], 1, 5)\n",
        "            data[key] = np.round(data[key], 1)\n",
        "    \n",
        "    # Create DataFrame\n",
        "    df = pd.DataFrame(data)\n",
        "    return df\n",
        "\n",
        "# Generate and display user feedback\n",
        "user_feedback = generate_user_feedback()\n",
        "print(user_feedback.head())\n",
        "\n",
        "# Calculate average ratings\n",
        "avg_ratings = user_feedback.iloc[:, 2:].mean()\n",
        "print(\"\\nAverage Ratings:\")\n",
        "print(avg_ratings)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "source": [
        "# Visualize user feedback\n",
        "plt.figure(figsize=(12, 8))\n",
        "\n",
        "# Radar chart of average ratings\n",
        "categories = ['Recognition', 'Translation', 'Interface', 'Latency', 'Overall']\n",
        "values = avg_ratings.values\n",
        "\n",
        "# Create radar chart\n",
        "angles = np.linspace(0, 2*np.pi, len(categories), endpoint=False).tolist()\n",
        "values = np.concatenate((values, [values[0]]))\n",
        "angles = np.concatenate((angles, [angles[0]]))\n",
        "categories = np.concatenate((categories, [categories[0]]))\n",
        "\n",
        "ax = plt.subplot(1, 2, 1, polar=True)\n",
        "ax.plot(angles, values, 'o-', linewidth=2)\n",
        "ax.fill(angles, values, alpha=0.25)\n",
        "ax.set_thetagrids(np.degrees(angles), categories)\n",
        "ax.set_ylim(0, 5)\n",
        "ax.set_title('Average User Ratings by Category')\n",
        "ax.grid(True)\n",
        "\n",
        "# Boxplot of ratings by category\n",
        "ax = plt.subplot(1, 2, 2)\n",
        "rating_cols = [col for col in user_feedback.columns if col.endswith('_rating')]\n",
        "rating_data = [user_feedback[col] for col in rating_cols]\n",
        "rating_labels = [col.replace('_rating', '').title() for col in rating_cols]\n",
        "\n",
        "ax.boxplot(rating_data, labels=rating_labels)\n",
        "ax.set_title('Distribution of User Ratings')\n",
        "ax.set_ylabel('Rating (1-5)')\n",
        "ax.set_ylim(0, 5.5)\n",
        "ax.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Conclusion and Recommendations\n",
        "\n",
        "Based on the evaluation results, we can make the following conclusions and recommendations:\n",
        "\n",
        "1. **Sign Recognition**: The system shows promising accuracy (~75%) but could be improved through more training data and model refinement.\n",
        "\n",
        "2. **Translation**: The translation component works well for basic signs but needs improvement for more complex translations.\n",
        "\n",
        "3. **Performance**: The system performs well on GPU hardware but may need optimization for mobile devices.\n",
        "\n",
        "4. **User Experience**: Users generally rate the system favorably, with interface and translation quality receiving the highest ratings.\n",
        "\n",
        "### Recommendations for Improvement:\n",
        "\n",
        "1. **Data Collection**: Gather more diverse sign language data to improve recognition accuracy.\n",
        "2. **Model Optimization**: Explore model quantization for better performance on mobile devices.\n",
        "3. **Translation Enhancement**: Incorporate context awareness in the translation process.\n",
        "4. **Latency Reduction**: Optimize the pipeline to reduce overall latency, which received the lowest user ratings.\n",
        "\n",
        "These improvements will be implemented in the next version of SignSpeak."
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.5"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 4
} 